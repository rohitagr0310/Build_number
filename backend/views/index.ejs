<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home Page</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-900 text-white">
    <div class="container mx-auto py-10">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Tekmedika</h1>
      </div>
      <h1 class="text-3xl font-bold mb-6">Part Entry Page</h1>

      <!-- Dropdowns -->
      <div class="flex mb-4">
        <div class="mr-4">
          <label for="header" class="block font-semibold mb-1">Header</label>
          <select
            id="header"
            name="header"
            class="w-56 p-2 border rounded focus:outline-none focus:border-blue-500 bg-gray-800 text-white"
          >
            <option value="">Select</option>
          </select>
        </div>
        <div class="mr-4">
          <label for="commodity" class="block font-semibold mb-1"
            >Commodity</label
          >
          <select
            id="commodity"
            name="commodity"
            class="w-56 p-2 border rounded focus:outline-none focus:border-blue-500 bg-gray-800 text-white"
          >
            <option value="">Select</option>
          </select>
        </div>
        <div class="mr-4">
          <label for="subcommodity" class="block font-semibold mb-1"
            >Sub Commodity</label
          >
          <select
            id="subcommodity"
            name="subcommodity"
            class="w-56 p-2 border rounded focus:outline-none focus:border-blue-500 bg-gray-800 text-white"
          >
            <option value="">Select</option>
          </select>
        </div>
        <p class="text-white text-[2vw] flex items-center ml-[3vw]" id="Partno">
          RAM
        </p>
      </div>

      <!-- Description Field -->
      <div class="mb-4">
        <label for="description" class="block font-semibold mb-1"
          >Description</label
        >
        <textarea
          id="description"
          name="description"
          rows="4"
          class="w-full p-2 border rounded focus:outline-none focus:border-blue-500 bg-gray-800 text-white"
        ></textarea>
      </div>

      <!-- Buttons -->
      <div class="flex">
        <button
          id="addPartBtn"
          class="bg-blue-500 text-white px-4 py-2 rounded mr-2"
        >
          Add Part
        </button>
        <button
          id="editPartBtn"
          class="bg-green-500 text-white px-4 py-2 rounded"
        >
          Edit Part
        </button>
      </div>

      <!-- Input field for part number -->
      <!-- Input field for part number -->
      <div id="partInput" style="display: none" class="mt-4">
        <label for="partNumber" class="block font-semibold mb-1"
          >Part Number (001-999)</label
        >
        <input
          type="number"
          min="1"
          max="999"
          id="partNumber"
          name="partNumber"
          class="w-56 p-2 border rounded focus:outline-none focus:border-blue-500 bg-gray-800 text-white"
        />
        <button
          id="submitPartBtn"
          class="bg-blue-500 text-white px-4 py-2 rounded mt-2"
        >
          Submit
        </button>
      </div>

      <!-- Cart Table -->
      <h2 class="text-2xl font-bold mt-6 mb-4">Cart</h2>
      <table class="min-w-full border-collapse border border-gray-600">
        <thead>
          <tr>
            <th class="border border-gray-600 px-4 py-2">Part Number</th>
            <th class="border border-gray-600 px-4 py-2">Header</th>
            <th class="border border-gray-600 px-4 py-2">Commodity</th>
            <th class="border border-gray-600 px-4 py-2">Sub Commodity</th>
            <th class="border border-gray-600 px-4 py-2">Description</th>
            <th class="border border-gray-600 px-4 py-2">Actions</th>
          </tr>
        </thead>
        <tbody id="cartBody"></tbody>
      </table>

      <button
        id="submitAllBtn"
        class="bg-blue-500 text-white px-4 py-2 rounded mt-4"
      >
        Submit All Parts
      </button>
    </div>

    <script>
      // Cart array to store added parts
      let cart = [];

      // Fetch data for headers
      fetch("/getheader")
        .then((response) => response.json())
        .then((headers) => {
          const headerDropdown = document.getElementById("header");
          headers.forEach((header) => {
            const option = document.createElement("option");
            option.text = header.Definition;
            option.value = header.code; // Change to the appropriate property for definition
            headerDropdown.add(option);
          });
        });

      // Fetch data for commodities
      fetch("/getcommodity")
        .then((response) => response.json())
        .then((commodities) => {
          const commodityDropdown = document.getElementById("commodity");
          commodities.forEach((commodity) => {
            const option = document.createElement("option");
            option.text = commodity.Definition;
            option.value = commodity.code; // Change to the appropriate property for definition
            commodityDropdown.add(option);
          });
        });

      // Handle commodity selection to populate subcommodity dropdown
      document
        .getElementById("commodity")
        .addEventListener("change", function () {
          const commodityCode = this.value;
          fetch("/getsubcommodity", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ code: commodityCode }),
          })
            .then((response) => response.json())
            .then((subcommodities) => {
              const subcommodityDropdown =
                document.getElementById("subcommodity");
              subcommodityDropdown.innerHTML = ""; // Clear existing options
              subcommodities.forEach((subcommodity) => {
                const option = document.createElement("option");
                option.text = subcommodity.Definition;
                option.value = subcommodity.index; // Change to the appropriate property for definition
                subcommodityDropdown.add(option);
              });
            });
        });

      // Add click event listeners for buttons
      // Function to toggle visibility of part input field
      function togglePartInputVisibility(visible) {
        document.getElementById("partInput").style.display = visible
          ? "block"
          : "none";
      }

      // Add click event listener for "Edit Part" button
      document
        .getElementById("editPartBtn")
        .addEventListener("click", function () {
          // Toggle visibility of part input field
          togglePartInputVisibility(true);
        });

      document.getElementById("partNumber").onkeypress = function (e) {
        var ev = e || window.event;
        if (ev.charCode < 48 || ev.charCode > 57) {
          return false;
        } else if (this.value * 10 + ev.charCode - 48 > this.max) {
          return false;
        } else {
          return true;
        }
      };

      // Function to update the cart display
      function updateCart() {
        const cartBody = document.getElementById("cartBody");
        cartBody.innerHTML = ""; // Clear existing cart display

        cart.forEach((item, index) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td class="border border-gray-600 px-4 py-2">${item.partNumber}</td>
            <td class="border border-gray-600 px-4 py-2">${item.header}</td>
            <td class="border border-gray-600 px-4 py-2">${item.commodity}</td>
            <td class="border border-gray-600 px-4 py-2">${item.subcommodity}</td>
            <td class="border border-gray-600 px-4 py-2">${item.description}</td>
            <td class="border border-gray-600 px-4 py-2">
              <button class="bg-red-500 text-white px-2 py-1 rounded removeBtn" data-index="${index}">Remove</button>
            </td>
          `;
          cartBody.appendChild(row);
        });

        // Add remove functionality to each button
        const removeButtons = document.querySelectorAll(".removeBtn");
        removeButtons.forEach((button) => {
          button.addEventListener("click", function () {
            const index = this.getAttribute("data-index");
            cart.splice(index, 1); // Remove item from cart
            updateCart(); // Refresh cart display
          });
        });
      }

      // Add click event listener for "Add Part" button
      document
        .getElementById("addPartBtn")
        .addEventListener("click", function () {
          const header = document.getElementById("header").value;
          const commodity = document.getElementById("commodity").value;
          const subcommodity = document.getElementById("subcommodity").value;
          const description = document.getElementById("description").value;

          // Add a new part with "New Part" part number
          cart.push({
            partNumber: "New Part",
            header,
            commodity,
            subcommodity,
            description,
          });

          updateCart(); // Update the cart display
        });

      document
        .getElementById("submitPartBtn")
        .addEventListener("click", function () {
          const header = document.getElementById("header").value;
          const commodity = document.getElementById("commodity").value;
          const subcommodity = document.getElementById("subcommodity").value;
          const partNumber = document.getElementById("partNumber").value;
          const description = document.getElementById("description").value;

          cart.push({
            partNumber,
            header,
            commodity,
            subcommodity,
            description,
          });

          updateCart(); // Update the cart display
        });

      document
        .getElementById("submitAllBtn")
        .addEventListener("click", async function () {
          // Disable the button to prevent multiple submissions
          this.disabled = true;
          this.innerText = "Submitting...";

          for (let i = 0; i < cart.length; i++) {
            const part = cart[i];

            // Create the payload for each part
            const payload = {
              header: part.header,
              Commodity: part.commodity,
              subCommodity: part.subcommodity,
              Part_No: part.partNumber || null, // Assign part number if provided, else null
              Definition: part.description,
            };

            try {
              // Send the request for each part in the cart
              const response = await fetch("/createpartNumber", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(payload),
              });

              const data = await response.json();
              if (
                data.status === "New Part Added" ||
                data.status === "Updated a part and made a new entry"
              ) {
                console.log(`Part submitted successfully: ${data.serial_No}`);
              } else {
                console.error(`Failed to submit part: ${data.status}`);
              }
            } catch (error) {
              console.error("Error submitting part:", error);
            }
          }

          // Reset button text and re-enable after submission is complete
          this.disabled = false;
          this.innerText = "Submit All Parts";

          // Clear cart after successful submission
          cart = [];
          updateCart(); // Refresh the cart display
        });
    </script>
  </body>
</html>
